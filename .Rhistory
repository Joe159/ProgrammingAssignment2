install.packages("Swirl")
install.packages("swirl")
install_from_swirl("R Programming")
install_from_swirl("R Programing")
library("swirl")
install_from_swirl("R Programing")
install_from_swirl("R Programming")
install_from_swirl("R Programming")
?`&&`
lm
search()
swirl()
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE&FALSE
TRUE & c(TRUE,TRUE,TRUE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE ~ c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
skip
skip
skip
skip
skip
skip
skip
skip
skip()
skip()
skip()
skip()
skip()
1
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
1
1
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
?sd
evaluate(sd,c(1,4,3.6,7.9,8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x(1)},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste()
?paste
paste("Programming", "is", "fun!")
submit()
telegram('Hello','World!')
submit()
mad_libs(place='Cape Town', adjective='run', noun='Alex')
submit
submit()
'I' %p% 'love' %p% 'R'
'I' %p% 'love' %p% 'R!'
Info()
Info
info()
main()
d1<-Sys.date()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date('1969-01-01')
unclass(d2)
t1<-Sys.Time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
?str
?strptime
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1, units='days')
getwd()
dir()
setwd('R Programming')
fir
dir()
setwd('ProgrammingAss')
setwd('ProgrammingAssignment2')
?`<<-`
source('~/R Programming/ProgrammingAssignment2/cachematrix.R')
x<-c(1,2,3,4)
dim(x)<-c(2,2)
x
solve(x)
x8x
x*x
makeCacheMatrix(x)
set()
set(x)
source('~/R Programming/ProgrammingAssignment2/cachematrix.R')
get()
set(x)
get(x)
source('~/R Programming/ProgrammingAssignment2/cachematrix.R')
source('~/R Programming/ProgrammingAssignment2/cachematrix.R')
?solve
source('~/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
set(x)
INV<<-solve(x)
INV
GetInv()
se
SetMatrix(dim(c(4,3,2,1)<-c(2,2)))
SetMatrix(dim(c(4,3,2,1))<-c(2,2)))
SetMatrix(dim(c(4,3,2,1))<-c(2,2))
source('~/R Programming/ProgrammingAssignment2/cachematrix.R')
source('~/R Programming/ProgrammingAssignment2/cachematrix.R')
A<-c(1,5,3,7,2,3,2,78,1)
dim(A)<-2
dim(A)<-c(3,3)
A
makeCacheMatrix()
source('~/R Programming/ProgrammingAssignment2/cachematrix.R')
source('~/R Programming/ProgrammingAssignment2/cachematrix.R')
A<-c(1,5,3,7,2,3,2,78,1)
dim(A)<-c(3,3)
makeCacheMatrix(A)
A<-makeCacheMatrix(A)
cacheSolve(A)
debug(cacheSolve)
cacheSolve(A)
INV
data()
data
A
A<-c(1,5,3,7,2,3,2,78,1)
cacheSolve(A)
debug(makeCacheMatrix)
A
dim(A)<-c(3,3)
A
B<-makeCacheMatrix(A)
B
source('~/R Programming/ProgrammingAssignment2/cachematrix.R')
source('~/R Programming/ProgrammingAssignment2/cacheMean.R')
makeVector()
a<-c(1,2,3)
makeVector()$set(a)
b<-makeVector()$set(a)
b
b<-makeVector(a)
b$set(a)
b
b<-makeVector(a)
cachemean(a)
source('~/R Programming/ProgrammingAssignment2/cacheMean.R')
makeVector()
x<-c(1,2,3,4,5)
makeVector(x)
cachemean(x)
cachemean()
a<-makevec
a<-makeVector()
a$set(x)
a
cachemean(a)
cachemean(a)
source('~/R Programming/ProgrammingAssignment2/cachematrix.R')
A<-c(1,2,3,4)
dim(A)<-c(2,2)
B<-makeCacheMatrix(A)
B$SetMatrix(A)
cacheSolve(B)
cacheSolve(B)
View(as.POSIXlt.POSIXct)
View(as.POSIXlt.POSIXct)
View(as.POSIXlt.numeric)
INV
m
x
unclass(INV)
A+2->A
A
C<-makeCacheMatrix(A)
INV
cacheSolve(C)
INV->10
INV<-10
cacheSolve(C)
A<-A+2
cacheSolve(C)
C$SetMatrix()
C$SetMatrix(A)
C
cacheSolve(C)
cacheSolve(C)
C$GetMatrix()
B$GetMatrix()
B$GetInverse()
B$GetInv()
cacheSolve(B)
source('~/R Programming/ProgrammingAssignment2/cachematrix.R')
source('~/R Programming/ProgrammingAssignment2/cachematrix.R')
